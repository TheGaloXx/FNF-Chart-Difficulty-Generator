package;

import flixel.FlxG;
import haxe.Json;
import openfl.events.Event;
import openfl.events.IOErrorEvent;
import openfl.net.FileReference;
import sys.FileSystem;
import sys.io.File;

using StringTools;

class Data
{
    public static var data:Dynamic;

    inline public static function getData():Void
    {
        var file = File.getContent('data.json').trim();
        data = cast Json.parse(file);

        Main.changeFPS(Data.data.settings.fps);
    }

    inline public static function saveData():Void
    {
        var json = {
			"settings": 
            {
                "skip": data.settings.skip,
                "songInfo": data.settings.songInfo,
                "noteInfo": data.settings.noteInfo,
                "sectionInfo": data.settings.sectionInfo,
                "fps": data.settings.fps,
		    }
        };

        File.saveContent('data.json', Json.stringify(json, '\t'));
    }

    inline public static function check():Void
    {
        if (!FileSystem.exists('data.json'))
        {
            var json = {
                "settings": 
                {
                    "skip": false,
                    "songInfo": true,
                    "noteInfo": true,
                    "sectionInfo": true,
                    "fps": 60
                }
            };
    
            File.saveContent('data.json', Json.stringify(json, '\t'));
        }
    }



    public static var _file:FileReference;

    public static function saveChart(chart:Chart):Void
    {
        var info = Json.stringify(
        {
			"Generated by": "Diff. Generator v0.0.7",
            "song": chart.data
		}, 
        "\t");

        if ((info != null) && (info.length > 0))
        {
            _file = new FileReference();
            _file.addEventListener(Event.COMPLETE, onSaveComplete);
            _file.addEventListener(Event.CANCEL, onSaveCancel);
            _file.addEventListener(IOErrorEvent.IO_ERROR, onSaveError);
            _file.save(info.trim(), '${chart.fileName}.json');

            trace('Swag');
        }
        else
            trace('F');
    }

    @:noCompletion
    public static function onSaveComplete(_):Void
    {
        _file.removeEventListener(Event.COMPLETE, onSaveComplete);
        _file.removeEventListener(Event.CANCEL, onSaveCancel);
        _file.removeEventListener(IOErrorEvent.IO_ERROR, onSaveError);
        _file = null;
        FlxG.log.notice("Successfully saved LEVEL DATA.");
    }

    @:noCompletion
    public static function onSaveCancel(_):Void
    {
        _file.removeEventListener(Event.COMPLETE, onSaveComplete);
        _file.removeEventListener(Event.CANCEL, onSaveCancel);
        _file.removeEventListener(IOErrorEvent.IO_ERROR, onSaveError);
        _file = null;
    }

    @:noCompletion
    public static function onSaveError(_):Void
    {
        _file.removeEventListener(Event.COMPLETE, onSaveComplete);
        _file.removeEventListener(Event.CANCEL, onSaveCancel);
        _file.removeEventListener(IOErrorEvent.IO_ERROR, onSaveError);
        _file = null;
        FlxG.log.error("Problem saving Level data");
    }
}